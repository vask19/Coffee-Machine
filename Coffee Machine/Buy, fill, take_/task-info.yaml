type: edu
custom_name: Buy, fill, take!
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {

            System.out.println("Starting to make a coffee\n" +
                    "Grinding coffee beans\n" +
                    "Boiling water\n" +
                    "Mixing boiled water with crushed coffee beans\n" +
                    "Pouring coffee into the cup\n" +
                    "Pouring some milk into the cup\n" +
                    "Coffee is ready!");
            char c = '1'+'3';
            System.out.println(c);
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        String string;
        TestClue(String s) {
            string = s;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue("take\n"))
                    .setInput("take\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n1\n"))
                    .setInput("buy\n1\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n2\n"))
                    .setInput("buy\n2\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n3\n"))
                    .setInput("buy\n3\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("fill\n2001\n510\n101\n21\n"))
                    .setInput("fill\n2001\n510\n101\n21\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.trim().split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            String[] clueLines = clue.string.trim().split("\\n");
            String action = clueLines[0].trim();

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0].replace("$", "");
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }


            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            if (water0 != 400 || milk0 != 540 || beans0 != 120
                || cups0 != 9 || money0 != 550) {
                return new CheckResult(false,
                    "Initial setup is wrong: " +
                        "coffee machine should fe filled like " +
                        "stated in the description");
            }

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            if (action.equals("take")) {

                if (diffMilk != 0) {
                    return new CheckResult(false,
                        "After \"take\" action milk " +
                            "amount shouldn't be changed");
                }

                if (diffWater != 0) {
                    return new CheckResult(false,
                        "After \"take\" action water " +
                            "amount shouldn't be changed");
                }

                if (diffBeans != 0) {
                    return new CheckResult(false,
                        "After \"take\" action beans " +
                            "amount shouldn't be changed");
                }

                if (diffCups != 0) {
                    return new CheckResult(false,
                        "After \"take\" action cups " +
                            "amount shouldn't be changed");
                }

                if (money1 != 0) {
                    return new CheckResult(false,
                        "After \"take\" action money " +
                            "amount should be zero");
                }

                return CheckResult.correct();
            }

            else if (action.equals("buy")) {

                String option = clueLines[1].trim();

                if (option.equals("1")) {

                    if (diffWater != -250) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "water amount should be lowered by 250");
                    }

                    if (diffMilk != 0) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "milk amount should not be changed");
                    }

                    if (diffBeans != -16) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "beans amount should be lowered by 16");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 4) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "money amount should be increased by 4");
                    }

                    return CheckResult.correct();

                }

                else if (option.equals("2")) {

                    if (diffWater != -350) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "water amount should be lowered by 350");
                    }

                    if (diffMilk != -75) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "milk amount should be lowered by 75");
                    }

                    if (diffBeans != -20) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "beans amount should be lowered by 20");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 7) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "money amount should be increased by 7");
                    }

                    return CheckResult.correct();
                }

                else if (option.equals("3")) {

                    if (diffWater != -200) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "water amount should be lowered by 350");
                    }

                    if (diffMilk != -100) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "milk amount should be lowered by 75");
                    }

                    if (diffBeans != -12) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "beans amount should be lowered by 20");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 6) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "money amount should be increased by 7");
                    }

                    return CheckResult.correct();
                }
            }

            else if (action.equals("fill")) {

                int water_ = Integer.parseInt(clueLines[1]);
                int milk_ = Integer.parseInt(clueLines[2]);
                int beans_ = Integer.parseInt(clueLines[3]);
                int cups_ = Integer.parseInt(clueLines[4]);

                if (diffMoney != 0) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "money amount should not be changed");
                }

                if (diffWater != water_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "water amount expected to be increased by " + water_ +
                            " but was increased by " + diffWater);
                }

                if (diffMilk != milk_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "milk amount expected to be increased by " + milk_ +
                            " but was increased by " + diffMilk);
                }

                if (diffBeans != beans_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "beans amount expected to be increased by " + beans_ +
                            " but was increased by " + diffBeans);
                }

                if (diffCups != cups_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "cups amount expected to be increased by " + cups_ +
                            " but was increased by " + diffCups);
                }


                return CheckResult.correct();

            }

            throw new RuntimeException("Can't check the answer");
        }
    }
  learner_created: false
- name: src/machine/coffe/Coffee.java
  visible: true
  text: |
    package machine.coffe;

    public enum Coffee {
        COFFE(50,200,15);
        private int amountOfMilkPerOneCoffee;
        private int amountOfWaterPerOneCoffee;
        private int amountOfCoffeeBeansPerOneCoffee;

        Coffee(){

        }

        Coffee(int amountOfMilkPerOneCoffee,int amountOfWaterPerOneCoffee,int amountOfCoffeeBeansPerOneCoffee){
            this.amountOfMilkPerOneCoffee = amountOfMilkPerOneCoffee;
            this.amountOfWaterPerOneCoffee = amountOfWaterPerOneCoffee;
            this.amountOfCoffeeBeansPerOneCoffee = amountOfCoffeeBeansPerOneCoffee;

        }

        public int getAmountOfMilkPerOneCoffee() {
            return amountOfMilkPerOneCoffee;
        }

        public int getAmountOfWaterPerOneCoffee() {
            return amountOfWaterPerOneCoffee;
        }

        public int getAmountOfCoffeeBeansPerOneCoffee() {
            return amountOfCoffeeBeansPerOneCoffee;
        }
    }
  learner_created: true
- name: src/machine/calculator/Test.java
  visible: true
  text: |
    package machine.calculator;

    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    public class Test {
        private final int water = 200;
        private final int milk = 50;
        private final int coffeeBeans = 15;

        private Map<String,Integer> calculator(int amount_coffee){
            int  amount_water = amount_coffee * water;
            int amount_milk = amount_coffee * milk;
            int amount_coffeeBeans = amount_coffee * coffeeBeans;

            Map<String,Integer> amountOfIngredients = new HashMap<>();

            amountOfIngredients.put("amount_coffee",amount_coffee);
            amountOfIngredients.put("milk",amount_milk);
            amountOfIngredients.put("water",amount_water);
            amountOfIngredients.put("coffeeBeans",amount_coffeeBeans);

            return amountOfIngredients;


        }

        public void print(int amount_coffee){
            Map<String,Integer> amountOfIngredients = calculator(amount_coffee);

            System.out.printf("For %d cups of coffee you will need:\n",amountOfIngredients.get("amount_coffee"));
            System.out.println(amountOfIngredients.get("water") + " ml of water");
            System.out.println( amountOfIngredients.get("milk") +" ml of milk");
            System.out.println( amountOfIngredients.get("coffeeBeans") + " g of coffee beans");


        }





    }
  learner_created: true
- name: src/machine/calculator/Calculator.java
  visible: true
  text: |
    package machine.calculator;

    public class Calculator {

        public void calculator(){

        }
    }
  learner_created: true
- name: src/machine/main/CoffeeMachine.java
  visible: true
  text: |
    package machine.main;

    import machine.calculator.Calculator;
    import machine.calculator.Test;
    import machine.coffe.Coffee;


    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Scanner;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class CoffeeMachine {
        static final private Scanner sc = new Scanner(System.in);
        private int  amount_water;
        private int amount_milk;
        private int amount_coffeeBeans;

        public CoffeeMachine(){

        }

        public CoffeeMachine(int amount_water, int amount_milk, int amount_coffeeBeans) {
            this.amount_water = amount_water;
            this.amount_milk = amount_milk;
            this.amount_coffeeBeans = amount_coffeeBeans;
        }



        private int coffeePortionCalculator (Coffee coffee){
            int coffeeFromWaterWillTurnOut = amount_water/coffee.getAmountOfWaterPerOneCoffee();
            int coffeeFromMilkWillTurnOut = amount_milk/coffee.getAmountOfMilkPerOneCoffee();
            int coffeeFromCoffee_BeansWillTurnOut = amount_coffeeBeans/coffee.getAmountOfCoffeeBeansPerOneCoffee();

            List<Integer> servingsCoffee  =
                     Stream.of(coffeeFromWaterWillTurnOut,coffeeFromMilkWillTurnOut,coffeeFromCoffee_BeansWillTurnOut)
                             .sorted()
                             .collect(Collectors.toList());

            return servingsCoffee.get(0);

        }

        public void start(){
            decisionToMakeCoffee(Coffee.COFFE);


        }

        private void fillFheCoffeeMachine(){
            System.out.println(" Write how many ml of water the coffee machine has:");
            amount_water = sc.nextInt();
            System.out.println(" Write how many ml of milk the coffee machine has:");
            amount_milk = sc.nextInt();
            System.out.println(" Write how many grams of coffee beans the coffee machine has:");
            amount_coffeeBeans = sc.nextInt();




        }

        private void decisionToMakeCoffee (Coffee coffee){
            fillFheCoffeeMachine();
            System.out.println(" Write how many cups of coffee you will need:");
            int needCoffee = sc.nextInt();
            int availableServings = coffeePortionCalculator(coffee);
            int difference  = availableServings - needCoffee;

            if (difference == 0){
                System.out.println("Yes, I can make that amount of coffee");
            }
            else if (difference > 0){
                System.out.printf("Yes, I can make that amount of coffee (and even %d more than that)/n",difference);
            }
            else {
                System.out.printf("No, I can make only %d cup(s) of coffee\n",availableServings);
            }














        }








    }
  learner_created: true
- name: src/machine/main/Main.java
  visible: true
  text: |
    package machine.main;

    import machine.coffe.Coffee;

    public class Main {
        public static void main(String[] args) {
           /* CoffeeMachine coffeeMachine = new CoffeeMachine();
            coffeeMachine.start();*/
            int i = 0;
            for (int k = 0; k < 100; k++) {
                System.out.println(i);
                i = i++;
                System.out.println("bef " + i);
            }
            System.out.println("el");
            System.out.println(i);

        }
    }
  learner_created: true
- name: src/machine/f
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/178/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 02 Aug 2021 14:15:25 UTC
record: 4
