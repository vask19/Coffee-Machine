type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {

            System.out.println("Starting to make a coffee\n" +
                    "Grinding coffee beans\n" +
                    "Boiling water\n" +
                    "Mixing boiled water with crushed coffee beans\n" +
                    "Pouring coffee into the cup\n" +
                    "Pouring some milk into the cup\n" +
                    "Coffee is ready!");
            char c = '1'+'3';
            System.out.println(c);
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/coffe/Coffee.java
  visible: true
  text: |
    package machine.coffe;

    public enum Coffee {
        ESPRESSO(0,250,16,4),
        LATTE(75,350,20,7),
        CAPPUCCINO(100,200,12,6);
        private int amountOfMilkPerOneCoffee;
        private int amountOfWaterPerOneCoffee;
        private int amountOfCoffeeBeansPerOneCoffee;
        private final int cupOfCoffee = 1;
        private int coffeePrice;

        Coffee(int amountOfMilkPerOneCoffee, int amountOfWaterPerOneCoffee, int amountOfCoffeeBeansPerOneCoffee, int coffeePrice) {
            this.amountOfMilkPerOneCoffee = amountOfMilkPerOneCoffee;
            this.amountOfWaterPerOneCoffee = amountOfWaterPerOneCoffee;
            this.amountOfCoffeeBeansPerOneCoffee = amountOfCoffeeBeansPerOneCoffee;
            this.coffeePrice = coffeePrice;
        }

        Coffee(){

        }



        public int getAmountOfMilkPerOneCoffee() {
            return amountOfMilkPerOneCoffee;
        }

        public int getAmountOfWaterPerOneCoffee() {
            return amountOfWaterPerOneCoffee;
        }

        public int getAmountOfCoffeeBeansPerOneCoffee() {
            return amountOfCoffeeBeansPerOneCoffee;
        }

        public int getCoffeePrice() {
            return coffeePrice;
        }
    }
  learner_created: true
- name: src/machine/main/CoffeeMachine.java
  visible: true
  text: |
    package machine.main;


    import machine.coffe.Coffee;


    import java.util.*;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class CoffeeMachine {
        static final private Scanner sc = new Scanner(System.in);
        private int  amount_water;
        private int amount_milk;
        private int amount_coffeeBeans;
        private int cups;
        private int money;

        public CoffeeMachine(){

        }

        public CoffeeMachine(int amount_water, int amount_milk, int amount_coffeeBeans, int cups, int money) {
            this.amount_water = amount_water;
            this.amount_milk = amount_milk;
            this.amount_coffeeBeans = amount_coffeeBeans;
            this.cups = cups;
            this.money = money;
        }

        public Map<Integer,String > coffeePortionCalculator (Coffee coffee){
            Map<Integer,String > map = new TreeMap<>();
            if (cups<1) map.put(0,"cups");

            int coffeeFromWaterWillTurnOut = amount_water/
                    (coffee.getAmountOfWaterPerOneCoffee() == 0 ? 1 :coffee.getAmountOfWaterPerOneCoffee());

            int coffeeFromMilkWillTurnOut = amount_milk/
                    (coffee.getAmountOfMilkPerOneCoffee() == 0 ? 1 : coffee.getAmountOfMilkPerOneCoffee());

            int coffeeFromCoffee_BeansWillTurnOut = amount_coffeeBeans/
                    (coffee.getAmountOfCoffeeBeansPerOneCoffee() == 0 ? 1 : coffee.getAmountOfCoffeeBeansPerOneCoffee());

            map.put(coffeeFromWaterWillTurnOut,"water");
            map.put(coffeeFromMilkWillTurnOut,"milk");
            map.put(coffeeFromCoffee_BeansWillTurnOut,"coffee beans");
            return map;
        }

        public void start(){
            String decision = null;
            do{
                System.out.println("Write action (buy, fill, remaining, take): ");
                 decision = sc.next();

                switch (decision){
                    case "remaining":
                        printStateOfMachine();
                        break;
                    case "buy":
                        buy();
                        break;
                    case "take":
                        takeMoney();
                        break;
                    case "fill":
                        fillFheCoffeeMachine();
                        break;
                }

            }while( !decision.equals("exit"));



        }

        private void fillFheCoffeeMachine(){
            System.out.println(" Write how many ml of water the coffee machine has:");
            amount_water += sc.nextInt();
            System.out.println(" Write how many ml of milk the coffee machine has:");
            amount_milk += sc.nextInt();
            System.out.println(" Write how many grams of coffee beans the coffee machine has:");
            amount_coffeeBeans += sc.nextInt();
            System.out.println("Write how many disposable cups of coffee you want to add: ");
            cups += sc.nextInt();

        }

        /*private void decisionToMakeCoffee (Coffee coffee){
            fillFheCoffeeMachine();
            System.out.println(" Write how many cups of coffee you will need:");
            int needCoffee = sc.nextInt();
            int availableServings = coffeePortionCalculator(coffee);
            int difference  = availableServings - needCoffee;

            if (difference == 0){
                System.out.println("Yes, I can make that amount of coffee");
            }
            else if (difference > 0){
                System.out.printf("Yes, I can make that amount of coffee (and even %d more than that)/n",difference);
            }
            else {
                System.out.printf("No, I can make only %d cup(s) of coffee\n",availableServings);
            }

        }*/



        public void takeMoney(){
            System.out.println("I gave you $" + money);
            money = 0;


        }

        public void buy(){
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: ");
            Coffee coffee = null;
            String selectedTypeOfCoffee =
                    sc.next();
            switch (selectedTypeOfCoffee){
                case "back":
                    return;
                case "1":
                    coffee = Coffee.ESPRESSO;
                    break;
                case "2":
                    coffee = Coffee.LATTE;
                    break;
                case "3":
                    coffee = Coffee.CAPPUCCINO;
                    break;
            }
            Map<Integer,String >  availableServings = coffeePortionCalculator(coffee);
            int minPosition = (availableServings
                    .keySet()
                    .stream()
                    .min(Integer::compareTo)
                    .get());
            if (minPosition > 0){
                makeCoffee(coffee);
                money += coffee.getCoffeePrice();
                System.out.println("I have enough resources, making you a coffee!");

            }else {
                String notEnough = availableServings.get(minPosition);
                System.out.printf("Sorry, not enough %s!\n",notEnough);

            }

        }
        private void makeCoffee(Coffee coffee){
            amount_coffeeBeans -= coffee.getAmountOfCoffeeBeansPerOneCoffee();
            amount_milk -= coffee.getAmountOfMilkPerOneCoffee();
            amount_water -= coffee.getAmountOfWaterPerOneCoffee();
            cups--;

        }

        public void printStateOfMachine(){
            System.out.printf("The coffee machine has:\n" +
                    "%d ml of water\n" +
                    "%d ml of milk\n" +
                    "%d g of coffee beans\n" +
                    "%d disposable cups\n" +
                    "$" + money + " of money\n", amount_water,amount_milk,amount_coffeeBeans,cups);
        }


    }
  learner_created: true
- name: src/machine/main/Main.java
  visible: true
  text: |
    package machine.main;

    import machine.coffe.Coffee;

    import java.util.Map;
    import java.util.TreeMap;

    public class Main {
        public static void main(String[] args) {
            CoffeeMachine coffeeMachine = new CoffeeMachine(400,540,120,9,550);
            coffeeMachine.start();



        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 02 Aug 2021 18:01:05 UTC
record: 6
